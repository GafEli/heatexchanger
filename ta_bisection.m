function [t_hot_out, t_cold_out, n_iter, Tc, Th] = ta_bisection(t_cold_in, t_hot_in, f)
    % 26-04-2023
%    t_cold_in = 15; % Входная температура холодного потока (хладагента)
%    t_hot_in = 70; % Входная температура горячего потока
    if ~(t_cold_in < t_hot_in)  % обработка возможной ошибки ввода
        error('Температура горячего потока должна быть выше температуры холодного.'); % остановить
    end % ошибка обработана
    C_cold = 4200; % удельная теплоемкость холодного потока Дж/(кг·К). заменить на переменное
    C_hot = 2100; % удельная теплоемкость горячего потока Дж/(кг·К)заменить на переменное
    alpha_hot = 2287; %коэффициент теплоотдачи горячего потока Вт/(м²·К)
    alpha_cold = 507; %коэффициент теплоотдачи холодного потока Вт/(м²·К)
    delta_st = 0.002; %  толщина стенки теплообменной трубки
    lambda_st = 28; % теплопроводность стали 08Х13
%    f = 32.2; % поверхность теплообмена м2
    G_hot = 3.89; % Массовый расход горячего потока, kg/s
    G_cold = 6.68; % Массовый расход холодного потока, kg/s
    k_tp = 1/((1/alpha_hot) + (1/alpha_cold) + (delta_st/lambda_st)) %коэф. теплопередачи 
   % q_exch = -1; % начальное приближение теплоты, получаемой хладагентом
    q_f = 0; % начальное приближение теплового потока
    t_c = t_cold_in; % Нижнее значение выходной температуры хладагента, K
    Q_exch = []; 
    Q_f = []; 
    Tc = []; 
    Th = []; 
    iterations = 1000; % Максимальное число итераций
    n_iter = 0; % Счётчик итераций ставим на ноль
    eps = 0.1; % Погрешность по разности потоков, W
    t_c_a = t_cold_in; % Начальное положение левой границы
    t_c_b = t_hot_in; % Начальное положение правой границы
    while n_iter < iterations % q_f>q_exch % итерации по температуре хладагента
        n_iter = n_iter + 1;
        t_c = 0.5*(t_c_a + t_c_b); % один шаг вверх по температуре холодного потока, K
        q_exch = C_cold*G_cold*(t_c-t_cold_in); % теплоты получил холодный поток, W;
        Q_exch = [Q_exch,q_exch];
        t_h = t_hot_in - q_exch/(C_hot*G_hot); % выходная температура горячего потока, K
        dt1 = t_hot_in - t_c; % разность температур горячего потока и нагретого хладагента, K
        if t_h < t_cold_in  % в процессе выполнения итераций возможно t_h>t_cold_in, коррекция:
            disp('Произведена коррекция выходной температуры горячего потока') % отчитаться о коррекции
            t_h = t_cold_in+1; % коррекция темепратуры горячего потока
        end % окончание коррекции
        dt2 = t_h - t_cold_in; % разность температур охлаждённого горячего потока и холодного хладагента, K
        delta_t_cp = log_mean(dt1,dt2); % средний логарифмический температурный напор, K
        q_f = k_tp*f*delta_t_cp; % значение теплового потока через контактную поверхность, W
        delta_q = q_exch - q_f; % Эта величинв должна быть равна 0 для точного решения
        if abs(delta_q)<eps  % Если она меньше допустимой погрешности, 
            break; % выйти из цикла;
        elseif delta_q>0  % иначе, если она положительна, решение левее;
            t_c_b = t_c; % в этом случае подвинуть правую границу влево.
        else % иначе она отрицательна, решение правее,
            t_c_a = t_c; % подвинуть левую границу вправо.
        end % закончить цикл
        Q_f = [Q_f,q_f]; % Дописать текущее значение потока
        Tc = [Tc,t_c]; % Дописать текущее значение выходной температуры хладагента, K
        Th = [Th,t_h]; % Дописать текущее значение температуры горячего потока, K
    end % закончить основной цикл
    t_hot_out = t_h; % вычисленная температура горячего потока на выходе
    t_cold_out = t_c; % вычисленная температура холодного потока на выходе
    figure;
    hold on
    plot(Q_exch); % график количества теплоты, W, от номера итерации
    plot(Q_f,'r'); % график потока через поверхность теплообмена, W, от номера итерации
    figure; 
    hold on
    plot(Tc,'b'); % график искомой выходной температуры хладагента от номера итерации
    
    plot(Th,'r'); % график искомой выходной температуры горячего потока
end % Конец основной программы

