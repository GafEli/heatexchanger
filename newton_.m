function newton_() % реализация метода Ньютона
    h = 0.001; % приращение независимого аргумента при вычислении производной
   hinv2 = 1/(2*h); % множитель для вычисления производной
    eps_max = 0.01; % максимально допусимая ошибка по x
    dx = 1d+12; % стартовое значение ошибки
    x = 11; % начальное приближение
    niter = 0; % число итераций устанавливается на ноль
    while abs(dx) > eps_max % пока ошибка превышает допустимую,
        niter = niter + 1; % увеличить счётчик числа итераций на 1
        y = f0(x); % значение функции в текущей точке
        dy = f1(x); % значение производной в текущей точке
        dx = y/dy; % смещение по x для перехода ближе к корню
        x = x - dx; % новое значение переменной
%        disp(x)
    end % конец цикла
    disp('выполнено итераций:'); 
    disp(niter); % вывести число итераций
    x = round_2(x); % округление корня до сотых
    disp('найденное значение выходной температуры холодного потока:');
    disp(x); % показать значение корня
end % конец тела основной функции

function dy1=f1(x1) % подпрограмма вычисления производной
    dy1 = hinv2(f0(x1+h)-f0(x1-h)); % значение производной в точке
end % конец подпрограммы вычисления производной

function u=round_2(u) % подпрограмма округления до сотых
    u = 0.01*round(100*u); % умножить на 100, округлить до целых и разделить на 100
end % конец подпрограммы

function [delta_q]=f0(t_c) % функция, корень которой ищется (разность потоков)
    t_cold_in = 10; % Входная температура холодного потока (хладагента)
    t_hot_in = 70; % Входная температура горячего потока
    C_cold = 4200; % удельная теплоемкость холодного потока Дж/(кг·К). заменить на переменное
    C_hot = 2100; % удельная теплоемкость горячего потока Дж/(кг·К)заменить на переменное
    alpha_hot = 2287; % коэффициент теплоотдачи горячего потока Вт/(м²·К)
    alpha_cold = 507; % коэффициент теплоотдачи холодного потока Вт/(м²·К)
    delta_st = 0.002; %толщина стенки теплообменной трубки
    lambda_st = 28; %теплопроводность стали 08Х13
    f = 32.2; % поверхность теплообмена м2
    G_hot = 3.89; % Массовый расход горячего потока, kg/s
    G_cold = 6.68; % Массовый расход холодного потока, kg/s
    k_tp = 1/((1/alpha_hot) + (1/alpha_cold) + (delta_st/lambda_st)); %коэф. теплопередачи 
    q_f = 0; % начальное приближение теплового потока
        q_exch = C_cold*G_cold*(t_c-t_cold_in); % теплоты получил холодный поток, W;
        t_h = t_hot_in - q_exch/(C_hot*G_hot); % выходная температура горячего потока, K
        dt1 = t_hot_in - t_c; % разность температур горячего потока и нагретого хладагента, K
        dt2 = t_h - t_cold_in; % разность температур охлаждённого горячего потока и холодного хладагента, K
        if dt2<0
            delta_t_cp = 0;
        else
            delta_t_cp = log_mean(dt1,dt2); % средний логарифмический температурный напор, K
        end
        q_f = k_tp*f*delta_t_cp; % значение теплового потока через контактную поверхность, W
        delta_q = q_exch - q_f; % Эта величинв должна быть равна 0 для точного решения
end % Конец основной программы

function lm=log_mean(z1, z2) % Подпрограмма вычисления среднего логарифмического температурного напора
%  $\textrm{logmean}(z_1,z_2)=\frac{z_1-z_2}{\textrm{ln}\frac{z_1}{z_2}}$
% Данная функция является симметричной: $\textrm{log_mean}(z_1,z_2)=\textrm{log_mean}(z_2,z_1)$
    if z1==z2 % если усредняемые числа равны, ...
        lm = z1; % ... то среднее равно первому из них: $\textrm{logmean}(z,z)=z$
    else % иначе ...
        lm = (z1-z2)/log(z1/z2); % ... среднее смещено в меньшую сторону.
    end % конец условного оператора
end % Конец подпрограммы вычисления среднего логарифмического температурного напора